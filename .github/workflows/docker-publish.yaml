---
name: Publish Docker image

on:
  push:
    tags: ["v*.*.*", "v*.*.*-.*"]
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: europe-west3-docker.pkg.dev
  GCR_PROJECT: ""
  PROJECT_SUBDIRECTORY: strg-docker
  IMAGE_NAME: ${{ github.event.repository.name }}
  WORKLOAD_IDENTITY_PROVIDER: "projects/<NUMBER>/locations/global/workloadIdentityPools/github/providers/github-oidc-provider"
  SERVICE_ACCOUNT: "github-artifactregistry@<PROJECT_ID>.iam.gserviceaccount.com"
  REPO_DISPATCH_TARGET: "strg-at/<REPO>" # cluster repo
  REPO_DISPATCH_EVENT_NAME: "<APP-NAME>-<ENVIRONMENT>-tag-update" # f.e. vue-app-integration-tag-update

jobs:
  build:
    runs-on:
      - self-hosted
      - <PROJECT-RUNNER> # if not exist, use strg-infra
    permissions:
      contents: read
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      # https://github.com/marketplace/actions/checkout
      - name: Checkout repository
        uses: actions/checkout@v3.3.0

      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      # SETUP
      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      # Setup cosign tool except on PR
      # https://github.com/marketplace/actions/cosign-installer
      - name: Setup cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.0.1
        with:
          cosign-release: v1.13.1

      # Workaround: https://github.com/docker/build-push-action/issues/461
      # https://github.com/marketplace/actions/docker-setup-qemu
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2.1.0

      # https://github.com/marketplace/actions/docker-setup-buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.4.1
        with:
          driver: docker

      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      # BUILD AND PUSH
      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      # Auth to GCloud for Artifact Registry except on PR
      # https://github.com/marketplace/actions/authenticate-to-google-cloud
      - name: Authenticate to Google Cloud
        if: github.event_name != 'pull_request'
        id: auth
        uses: "google-github-actions/auth@v1.0.0"
        with:
          token_format: "access_token"
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.SERVICE_ACCOUNT }}

      # Login against a Docker registry except on PR
      # https://github.com/marketplace/actions/docker-login
      - name: Log into Google Artifact Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/marketplace/actions/docker-metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4.3.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.GCR_PROJECT}}/${{ env.PROJECT_SUBDIRECTORY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix={{date 'YYMMDD-HHmmss'}}-
            type=ref,event=tag

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/marketplace/actions/build-and-push-docker-images
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v4.0.0
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: cosign sign ${{ env.REGISTRY }}/${{ env.GCR_PROJECT}}/${{ env.PROJECT_SUBDIRECTORY }}/${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}

      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      # UPDATE CLUSTER REPO
      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      # https://github.com/marketplace/actions/github-app-token
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v1.8.0
        env:
          # https://github.com/tibdex/github-app-token/issues/54
          # https://stackoverflow.com/questions/72104449/node-js-crypto-fails-to-sign-pem-key-string-from-file-with-error25066067dso-su
          OPENSSL_CONF: /dev/null
        with:
          app_id: ${{ secrets.STRG_BOT_GITHUB_APP_ID }}
          private_key: ${{ secrets.STRG_BOT_GITHUB_PEM }}

      # Send event to remote repo to update helm-release image tag for integration
      # https://github.com/marketplace/actions/repository-dispatch
      - name: Repository Dispatch
        if: github.event_name == 'push' && !(contains(github.ref, 'refs/tags/'))
        uses: peter-evans/repository-dispatch@v2.1.1
        env:
          token: ${{ steps.generate_token.outputs.token }}
          sha: ${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
        with:
          token: ${{ steps.generate_token.outputs.token }}
          repository: ${{ env.REPO_DISPATCH_TARGET }}
          event-type: ${{ env.REPO_DISPATCH_EVENT_NAME }}
          client-payload: '{"sha": "${{ env.sha }}"}'
